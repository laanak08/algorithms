Designing a dynamic programming algorithm
1. Characterize the structure of an optimal solution.
2. Recursively define the value of an optimal solution.
3. Compute the value of an optimal solution, typically in a bottom-up fashion.
4. Construct an optimal solution from computed information.

1. Characterize the structure of an optimal solution.
For the maximum subarray problem, an optimal solution consists of the max value in a series of sums of various combinations of elements from the starting array.
The various combinations occurr in two groups:
    -Combinations made from consecutive elements.
    -Combinations made from non-consecutive elements.
Mathematically speaking:
    // not sure how exactly to notate these
    consecutive elements: max(sum(x0,..,xi),..,sum(x0,..,xn))
    non-consecutive elements: max(sum(x0,..,xi),..,sum(x0,..,xn)) 

2. Recursively define the value of an optimal solution.

3. Compute the value of an optimal solution, typically in a bottom-up fashion.
4. Construct an optimal solution from computed information.
